/* eslint-disable @next/next/no-img-element */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { SignInButton, SignOutButton, useUser } from "@clerk/nextjs";

import { api, type RouterOutputs } from "~/utils/api";

const CreatePostWizard = () => {
  const [input, setInput] = useState("");
  const { user } = useUser();

  const { mutate: createPost } = api.posts.create.useMutation();

  // createPost()

  if (!user) return null;

  const { profileImageUrl, username } = user;
  const altText = username
    ? `${username}'s profile picture`
    : "Profile picture";

  return (
    <div className="flex flex-grow gap-3">
      <Image
        src={profileImageUrl}
        alt={altText}
        className="h-10 w-10 rounded-full"
        width="40"
        height="40"
      />
      <input
        placeholder="Type something"
        className="w-full bg-transparent outline-none"
        value={input}
        onChange={(e) => setInput(e.target.value)}
      />
      <button onClick={() => createPost({ content: input })}>Post</button>
    </div>
  );
};

import formatRelative from "date-fns/formatRelative";
import { LoadingPage } from "~/components/loading";
import { useState } from "react";

type PostWithUser = RouterOutputs["posts"]["getAll"][number];
const PostView = (props: PostWithUser) => {
  const { post, author } = props;
  const relativeTime = formatRelative(post.createdAt, new Date());
  return (
    <div
      className="flex flex-row gap-6 border-b border-slate-400 p-4"
      key={post.id}
    >
      <Image
        src={author.profilePicture}
        className="h-10 w-10 rounded-full"
        alt={`${author.username}'s profile picture`}
        width="40"
        height="40"
      />
      <div className="flex flex-col gap-y-2">
        <div className="flex flex-row items-center gap-1 text-slate-300">
          <span className="">{author.username}</span>
          <span className="text-sm font-thin">â€¢ {relativeTime}</span>
        </div>
        <span>{post.content}</span>
      </div>
    </div>
  );
};

const Feed = () => {
  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery();

  if (postsLoading) return <LoadingPage />;
  if (!data)
    return <div className="p-4 text-slate-300">Something went wrong...</div>;

  return (
    <div className="flex flex-col">
      {data?.map((fullPost) => (
        <PostView {...fullPost} key={fullPost.post.id} />
      ))}
    </div>
  );
};

const Home: NextPage = () => {
  const { isLoaded: userLoaded, isSignedIn } = useUser();

  // Start fetching posts
  api.posts.getAll.useQuery();

  if (!userLoaded) return <div></div>;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* Container */}
      <main className="flex h-screen justify-center">
        {/* Center column */}
        <div className="h-full w-full border-x border-slate-400 md:max-w-2xl">
          {/* Header */}
          <div className="flex flex-row items-center justify-between gap-12 border-b border-slate-400 p-4">
            {!!isSignedIn && <CreatePostWizard />}
            {!!isSignedIn && (
              <div className="btn flex justify-end">
                <SignOutButton />
              </div>
            )}

            {!isSignedIn && <div className="flex flex-grow"></div>}
            {!isSignedIn && (
              <div className="btn flex justify-end">
                <SignInButton />
              </div>
            )}
          </div>

          <Feed />
        </div>
      </main>
    </>
  );
};

export default Home;
